"""
Django settings for ascan project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (str(os.environ['DEBUG']) == '1')

ALLOWED_HOSTS = os.environ['ASCAN_HOST_NAMES'].split()

# Application definition

INSTALLED_APPS = [
    'scan.apps.ScanConfig',
    'manager.apps.ManagerConfig',
    'bg.apps.BgConfig',
    'django.contrib.auth',
    'django.contrib.admin',
    'channels',
    'bootstrap4',
    'crispy_forms',
    'markdownify',
    'dynamic_preferences',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ascan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ascan.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ['POSTGRES_DB'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'HOST': 'postgres',
        'PORT': 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Email config.
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_PORT = os.environ['EMAIL_PORT']
EMAIL_HOST_USER = os.environ['EMAIL_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_PASSWORD']
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = os.environ['DEFAULT_FROM_EMAIL']

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static/'),
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

LOGGING = {
        'version': 1,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                },
            },
        'loggers': {
            'daphne': {
                'handlers': [
                    'console',
                    ],
                'level': 'INFO'
                },
            }
        }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                { "address": "redis://redis:6379/0",
                    "password": os.environ['REDIS_PASS'] }
                ],
        },
    },
}

# ASGI - Django channels
ASGI_APPLICATION = "ascan.routing.application"

# Crispy forms.
CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Our custom settings.
SOLR_HOST = os.environ['SOLR_HOST']
SOLR_PORT = os.environ['SOLR_PORT']
SOLR_CORE = os.environ['SOLR_CORE']
SOLR_READER_PASS = os.environ['SOLR_READER_PASS']

SOLR_FEATURE_CODES = {
        'adj': 'adjectives_proportion_f',
        'awl': 'average_word_length_f',
        'awtf': 'average_word_tf_idf_f',
        'cop': 'compound_polarity_f',
        'd': 'date_post',
        'neg': 'negative_polarity_f',
        'neu': 'neutral_polarity_f',
        'non': 'nouns_proportion_f',
        'pdl': 'parent_document_length_i',
        'pn': 'period_number_i',
        'pos': 'positive_polarity_f',
        'prpn': 'proper_names_proportion_f',
        'sl': 'sent_length_i',
        'sld': 'sentence_length_deviation_f',
        'wl': 'word_length_i',
        'veb': 'verbs_proportion_f',
        }

HUMAN_FEATURE_NAMES = {
        'adj': 'adjectives proportion',
        'awl': 'average word length',
        'awtf': 'average word tfdf',
        'cop': 'compound polarity',
        'd': 'date post',
        'neg': 'negative polarity',
        'neu': 'neutral polarity',
        'non': 'nouns proportion',
        'pdl': 'parent document length',
        'pn': 'period number',
        'pos': 'positive polarity',
        'prpn': 'proper names proportion',
        'sl': 'sent length',
        'sld': 'sentence length deviation',
        'wl': 'word length',
        'veb': 'verbs proportion',
        }

DEFAULT_RESULT_RULE = {
        'name': 'Standard',
        'slug': 'standard',
        'rule_string': 'sl,*,*,2;wl,9,*,5;awtf,*,0.4,2;neg,*,0.35,0;pos,*,0.45,0',
        }

# The rule string to use when searching for text fragments for the query suggestion feature.
# (we use the default rule instead so you can get what is suggested)
#SUGGESTIONS_RESULT_RULE = 'awtf,*,0.2,0;sld,*,125,0.3'

SOLR_TEXT_FIELDS = set(['text_en', 'text_xx'])
