version: '3.7'

services:
  website:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_website
     ports:
        - '127.0.0.1:8000:8000'
     # Use -v2 for more reporting
     command: daphne -b 0.0.0.0 -p 8000 -v1 ascan.asgi:application
     env_file:
        - '.env'
     depends_on:
        - postgres
        - redis
        - solr
     volumes:
        # lets us persist migrations and change templates without restarting
        - ./python_modules/ascan/:/opt/ascan/ascan/

  maintenance:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_website
     command: python3 maintenance.py -L WARNING
     env_file:
        - '.env'
     # This should restart on crashes.
     restart: on-failure
     depends_on:
        - website # to get the DB initialization

  speechtractor:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_stractor
     ports:
        - '127.0.0.1:3757:3756'
     command: "sbcl --eval '(ql:quickload :speechtractor)'"
     # Make sbcl not exit immediately.
     tty: true
     env_file:
        - '.env'
     depends_on:
        - solr

  omnivore2:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_omnivore2
     ports:
        - '127.0.0.1:6824:6823'
     # Only authenticate with the client certificate for now.
     command: >-
       gunicorn -b 0.0.0.0:6823 wsgi:app --log-level=info
       --ssl-version TLSv1_2
       --keyfile /home/certs/ascan_internal_key.key
       --certfile /home/certs/ascan_internal.pem
       --ca-certs /home/certs/ascan_internal.pem
     env_file:
        - '.env'
     depends_on:
        - redis
        - solr

  zookeeper:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_zookeeper
     restart: on-failure

  nimbus:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_stormcrawler
        args:
          UAGENT_STRING: ${UAGENT_STRING}
     command: storm nimbus
     restart: on-failure
     depends_on:
        - omnivore2
        - postgres
        - redis
        - solr
        - selenium
        - website
        - zookeeper
     env_file:
        - '.env'

  storm_supervisor:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_stormcrawler
        args:
          UAGENT_STRING: ${UAGENT_STRING}
     command: storm supervisor
     restart: on-failure
     depends_on:
       - nimbus # to lead us
       - zookeeper # to register
     env_file:
        - '.env'

  storm_ui:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_stormcrawler
        args:
          UAGENT_STRING: ${UAGENT_STRING}
     command: storm ui
     depends_on:
       - nimbus
     ports:
        - '127.0.0.1:8888:8080'
     env_file:
        - '.env'

  stormcrawler:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_stormcrawler
        args:
          UAGENT_STRING: ${UAGENT_STRING}
     # We run it in local mode, not to deal with Zookeeper.
     command: "storm jar generalcrawl-0.1.jar com.actualscan.crawling.CrawlTopology -conf storm.yaml"
     env_file:
        - '.env'
          #restart: on-failure # Storm local mode dies every 30 secs
     depends_on:
        - nimbus

  redditscrape:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_redditscrape
     command: python reddit_scraper.py -L INFO
     env_file:
        - '.env'
     depends_on:
        - postgres
        - solr
        - website
        - omnivore2

  selenium:
     image: 'selenium/standalone-chrome:3.141.59'
     volumes:
        - /dev/shm:/dev/shm
     ports:
        - '127.0.0.1:4444:4444'
     env_file:
        - '.env'

  postgres:
     image: 'postgres:12.2'
     volumes:
        - pgdata:/var/lib/postgresql/data:Z
     ports:
        # Map the original 5432 to 5433.
        - '127.0.0.1:5433:5432'
     env_file:
        - '.env'

  # Needed for Django Channels (and Celery when we use it).
  redis:
     build:
       context: .
       dockerfile: dockerfiles/Dockerfile_redis
       args:
         REDIS_PASS: ${REDIS_PASS}
     command: >-
       redis-server /usr/local/etc/redis/redis.conf
       --tls-port 6379 --port 0
       --tls-cert-file /home/certs/ascan_internal.pem
       --tls-key-file /home/certs/ascan_internal_key.key
       --tls-ca-cert-file /home/certs/ascan_internal.pem
     volumes:
       - redisdata:/var/lib/redis/data
     ports:
       - '127.0.0.1:6380:6379'

  solr:
     build:
        context: .
        dockerfile: dockerfiles/Dockerfile_solr
        args:
          KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
          SOLR_ADMIN_HASH: ${SOLR_ADMIN_HASH}
          SOLR_UPDATER_HASH: ${SOLR_UPDATER_HASH}
          SOLR_READER_HASH: ${SOLR_READER_HASH}
     ports:
        # Map the original 8983 to 8984.
        - '127.0.0.1:8984:8983'
     volumes:
        - solrdata:/var/solr/:Z

# Named volumes.
volumes:
   nimbusdata:
   pgdata:
   redisdata:
   solrdata:
